[
    {
        "id": "ea233fdaaaac7f38",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "044b8567a46bcbc1",
        "type": "function",
        "z": "ea233fdaaaac7f38",
        "name": "validate authorization",
        "func": "  let Credentials = msg.req.headers['authorization'] || ''\n  if (! Credentials.startsWith('Basic')) {\n    return withAuthorizationRequest()\n  }\n\n  Credentials = Credentials.replace(/^Basic\\s+/,'')      // still Base64-encoded\n  try {\n    Credentials = (new Buffer(Credentials,'base64')).toString('utf8')\n  } catch (Signal) { return withAuthorizationRequest() }\n\n  let UserId   = Credentials.replace(/:.*$/,'').trim().toLowerCase()\n  let Password = Credentials.replace(/^[^:]+:/,'').trim()\n\n  let UserRegistry = global.get('UserRegistry') || Object.create(null)\n  if (UserId in UserRegistry) {\n    let UserSpecs = UserRegistry[UserId]\n    if (UserSpecs.Password === Password) {              // internal optimization\n      return withAuthorizationOf(UserId,UserSpecs.Roles || [])\n    }\n\n    let PBKDF2Iterations = global.get('PBKDF2Iterations') || 100000\n    crypto.pbkdf2(\n      Password, Buffer.from(UserSpecs.Salt,'hex'), PBKDF2Iterations, 64, 'sha512',\n      function (Error, computedHash) {\n        if ((Error == null) && (computedHash.toString('hex') === UserSpecs.Hash)) {\n          UserSpecs.Password = Password       // speeds up future auth. requests\n          return withAuthorizationOf(UserId,UserSpecs.Roles || [])\n        } else {\n          return withAuthorizationRequest()\n        }\n      }\n    )\n  } else {\n    return withAuthorizationRequest()\n  }\n\n  function withAuthorizationOf (UserId, UserRoles) {\n    if ((msg.requiredRole == null) || (UserRoles.indexOf(msg.requiredRole) >= 0)) {\n      msg.authenticatedUser = UserId\n      msg.authorizedRoles   = UserRoles\n      \n      node.send([msg,null])\n      node.done()\n    } else {\n      return withAuthorizationRequest()\n    }\n  }\n\n  function withAuthorizationRequest () {\n    msg.headers = msg.headers || {}\n    msg.headers['WWW-Authenticate'] = 'Basic'\n\n    msg.payload    = 'Unauthorized'\n    msg.statusCode = 401\n\n    node.send([null,msg])\n    node.done()\n  }\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "e0e0d17d3102670c"
            ],
            [
                "368ab4163a1781fe"
            ]
        ]
    },
    {
        "id": "42afd0252abcde7b",
        "type": "http in",
        "z": "ea233fdaaaac7f38",
        "name": "",
        "url": "basic-auth",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "a592efb9da32b941"
            ]
        ]
    },
    {
        "id": "a453e55d889e4f45",
        "type": "http response",
        "z": "ea233fdaaaac7f38",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 550,
        "y": 500,
        "wires": []
    },
    {
        "id": "15935af93c0fb448",
        "type": "change",
        "z": "ea233fdaaaac7f38",
        "name": "inform about success",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "successfully authorized",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 500,
        "wires": [
            [
                "a453e55d889e4f45"
            ]
        ]
    },
    {
        "id": "ed50b5b2e94746c8",
        "type": "inject",
        "z": "ea233fdaaaac7f38",
        "name": "at Startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 120,
        "y": 640,
        "wires": [
            [
                "4a4c700ae4ecd934"
            ]
        ]
    },
    {
        "id": "2d98c64a67e881e7",
        "type": "file in",
        "z": "ea233fdaaaac7f38",
        "name": "",
        "filename": "./registeredUsers.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 180,
        "y": 760,
        "wires": [
            [
                "70c82a6e25251a70"
            ]
        ]
    },
    {
        "id": "470b387186d7852a",
        "type": "catch",
        "z": "ea233fdaaaac7f38",
        "name": "",
        "scope": [
            "2d98c64a67e881e7",
            "70c82a6e25251a70"
        ],
        "uncaught": false,
        "x": 130,
        "y": 820,
        "wires": [
            [
                "46809118b7d27252"
            ]
        ]
    },
    {
        "id": "a52bccab8bc183a8",
        "type": "debug",
        "z": "ea233fdaaaac7f38",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'could not load user registry'",
        "statusType": "jsonata",
        "x": 530,
        "y": 820,
        "wires": []
    },
    {
        "id": "3eb566d1907d9b3b",
        "type": "debug",
        "z": "ea233fdaaaac7f38",
        "name": "Status",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'user registry available'",
        "statusType": "jsonata",
        "x": 550,
        "y": 640,
        "wires": []
    },
    {
        "id": "46809118b7d27252",
        "type": "function",
        "z": "ea233fdaaaac7f38",
        "name": "create in global context",
        "func": "  let UserRegistry = Object.create(null)\n    UserRegistry['node-red'] =  {\n      Roles: ['node-red'],\n      Salt: '4486e8d35b8275020b1301226cc77963',\n      Hash: 'ab2b740ea9148aa4f320af3f3ba60ee2e33bb8039c57eea2b29579ff3f3b16bec2401f19e3c6ed8ad36de432b80b6f973a12c41af5d50738e4bb902d0117df53'\n    }\n  global.set('UserRegistry',UserRegistry)\n\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 820,
        "wires": [
            [
                "a52bccab8bc183a8",
                "e0b359a7b5f90189"
            ]
        ]
    },
    {
        "id": "a463788d4c5c13ab",
        "type": "file",
        "z": "ea233fdaaaac7f38",
        "name": "",
        "filename": "./registeredUsers.json",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 440,
        "y": 940,
        "wires": [
            [
                "53948a7e0233c789"
            ]
        ]
    },
    {
        "id": "0892a7393f0e2863",
        "type": "catch",
        "z": "ea233fdaaaac7f38",
        "name": "",
        "scope": [
            "a463788d4c5c13ab"
        ],
        "uncaught": false,
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "e50a7cafe871861b",
                "d97e0ea28a9f3c81"
            ]
        ]
    },
    {
        "id": "e50a7cafe871861b",
        "type": "debug",
        "z": "ea233fdaaaac7f38",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'could not write user registry'",
        "statusType": "jsonata",
        "x": 270,
        "y": 1100,
        "wires": []
    },
    {
        "id": "53948a7e0233c789",
        "type": "change",
        "z": "ea233fdaaaac7f38",
        "name": "restore payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "_payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "_payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 1000,
        "wires": [
            [
                "1ce07b54225e17dd"
            ]
        ]
    },
    {
        "id": "d97e0ea28a9f3c81",
        "type": "change",
        "z": "ea233fdaaaac7f38",
        "name": "report in payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Internal Server Error'",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "500",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "_payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 1060,
        "wires": [
            [
                "1ce07b54225e17dd"
            ]
        ]
    },
    {
        "id": "70c82a6e25251a70",
        "type": "function",
        "z": "ea233fdaaaac7f38",
        "name": "write to global context",
        "func": "  let UserSet = JSON.parse(msg.payload)                             // may fail!\n\n  let UserRegistry = Object.create(null)\n  for (let UserId in UserSet) {\n    if (UserSet.hasOwnProperty(UserId)) {\n      if ((UserId.indexOf('/') >= 0) || (UserId.indexOf(':') >= 0)) {\n        throw 'Invalid character in UserId found'\n      }\n      \n      UserRegistry[UserId.toLowerCase()] = UserSet[UserId]\n    }\n  }\n  global.set('UserRegistry',UserRegistry)\n\n  msg.payload = ''\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 760,
        "wires": [
            [
                "e0b359a7b5f90189"
            ]
        ]
    },
    {
        "id": "4f110197c9f2a334",
        "type": "function",
        "z": "ea233fdaaaac7f38",
        "name": "→ catch",
        "func": "// do not pass any msg from here!",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 700,
        "wires": [
            [
                "46809118b7d27252"
            ]
        ]
    },
    {
        "id": "687ebf9f0226b7dc",
        "type": "function",
        "z": "ea233fdaaaac7f38",
        "name": "→ catch",
        "func": "// do not pass any msg from here!",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 880,
        "wires": [
            [
                "d97e0ea28a9f3c81"
            ]
        ]
    },
    {
        "id": "848c6ddfb76643e4",
        "type": "function",
        "z": "ea233fdaaaac7f38",
        "name": "read from global context",
        "func": "  let UserRegistry = global.get('UserRegistry')\n  let UserSet = {}\n  for (let UserId in UserRegistry) {\n    if (UserRegistry[UserId] == null) {\n      UserSet[UserId] = null\n    } else {\n      let UserEntry = Object.assign({},UserRegistry[UserId])\n        delete UserEntry.Password     // never write passwords in plain text!\n      UserSet[UserId] = UserEntry\n    }\n  }\n\n  msg.payload = JSON.stringify(UserSet)\n  return msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 940,
        "wires": [
            [
                "a463788d4c5c13ab"
            ]
        ]
    },
    {
        "id": "fe9d58b1f84fce63",
        "type": "inject",
        "z": "ea233fdaaaac7f38",
        "name": "show UserRegistry",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 1240,
        "wires": [
            [
                "663a2575d83ff39f"
            ]
        ]
    },
    {
        "id": "663a2575d83ff39f",
        "type": "function",
        "z": "ea233fdaaaac7f38",
        "name": "create output",
        "func": "let UserRegistry = global.get('UserRegistry') || Object.create(null)\n  let UserList = []\n  for (let UserId in UserRegistry) {\n    UserList.push(\n      UserRegistry[UserId] == null ? '[' + UserId + ']' : UserId\n    )\n  }\nmsg.payload = (\n  UserList.length === 0\n  ? '(no user registered)'\n  : 'registered users: \"' + UserList.join('\",\"') + '\"'\n)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1240,
        "wires": [
            [
                "62b2658722dbd9e7"
            ]
        ]
    },
    {
        "id": "62b2658722dbd9e7",
        "type": "debug",
        "z": "ea233fdaaaac7f38",
        "name": "show",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1240,
        "wires": []
    },
    {
        "id": "e64025c431b73536",
        "type": "reusable-in",
        "z": "ea233fdaaaac7f38",
        "name": "basic auth",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 100,
        "y": 300,
        "wires": [
            [
                "044b8567a46bcbc1"
            ]
        ]
    },
    {
        "id": "254d667c7cc38a4e",
        "type": "reusable-in",
        "z": "ea233fdaaaac7f38",
        "name": "load or create UserRegistry",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 160,
        "y": 700,
        "wires": [
            [
                "4f110197c9f2a334",
                "2d98c64a67e881e7"
            ]
        ]
    },
    {
        "id": "e50f6e5eb55f7d87",
        "type": "reusable-in",
        "z": "ea233fdaaaac7f38",
        "name": "write UserRegistry",
        "info": "describe your reusable flow here",
        "scope": "global",
        "x": 130,
        "y": 880,
        "wires": [
            [
                "687ebf9f0226b7dc",
                "848c6ddfb76643e4"
            ]
        ]
    },
    {
        "id": "e0e0d17d3102670c",
        "type": "reusable-out",
        "z": "ea233fdaaaac7f38",
        "name": "authorized",
        "position": 1,
        "x": 510,
        "y": 280,
        "wires": []
    },
    {
        "id": "368ab4163a1781fe",
        "type": "reusable-out",
        "z": "ea233fdaaaac7f38",
        "name": "unauthorized",
        "position": "2",
        "x": 510,
        "y": 320,
        "wires": []
    },
    {
        "id": "e0b359a7b5f90189",
        "type": "reusable-out",
        "z": "ea233fdaaaac7f38",
        "name": "return",
        "position": 1,
        "x": 550,
        "y": 700,
        "wires": []
    },
    {
        "id": "1ce07b54225e17dd",
        "type": "reusable-out",
        "z": "ea233fdaaaac7f38",
        "name": "return",
        "position": 1,
        "x": 550,
        "y": 1000,
        "wires": []
    },
    {
        "id": "a592efb9da32b941",
        "type": "reusable",
        "z": "ea233fdaaaac7f38",
        "name": "",
        "target": "basic auth",
        "outputs": 2,
        "x": 310,
        "y": 440,
        "wires": [
            [
                "15935af93c0fb448"
            ],
            [
                "a453e55d889e4f45"
            ]
        ]
    },
    {
        "id": "4a4c700ae4ecd934",
        "type": "reusable",
        "z": "ea233fdaaaac7f38",
        "name": "",
        "target": "load or create userregistry",
        "outputs": 1,
        "x": 340,
        "y": 640,
        "wires": [
            [
                "3eb566d1907d9b3b"
            ]
        ]
    }
]